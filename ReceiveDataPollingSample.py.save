from digi.xbee.devices import XBeeDevice
from digi.xbee.util import utils
import os

import time
import sys
import _thread   
# TODO: Replace with the serial port where your local module is connected to.
PORT = "/dev/ttyUSB0"
# TODO: Replace with the baud rate of your local module.
BAUD_RATE = 9600
recu=str(2)
#def capteur (device,remote_device):


            # time.sleep(0.01)

            # if float(xbee_message.data.decode())<10:
            #         device.send_data(remote_device, "STOP")
            # else:
            #     device.send_data(remote_device, "RUN")
            #     print()
    
            
def actioneur (device,remote_device):
    
    while True:
    #     device.send_data(remote_device, "RUN")
        # print("teste")
        # time.sleep(1)
        # if float(xbee_message.data.decode())<10:
        #         device.send_data(remote_device, "STOP")
        # else:
        #     device.send_data(remote_device, "RUN")
        #     print()
        global recu
        #print(recu)
        #if float(xbee_message.data.decode())<10:
        #millis = int(round(time.time() * 1000))
        device.send_data_async(remote_device, recu)
        #else:
         #   device.send_data_async(remote_device, "RUN")
          #  print()         
        
def main():
    

    device = XBeeDevice(PORT, BAUD_RATE)


    device.open()
    device.set_parameter("NI", bytearray("TEST", 'utf8'))
    #print("Node ID:%s" % device.get_parameter("NI").decode())
    
    device.flush_queues()

    xbee_network = device.get_network()
    remote_device = xbee_network.discover_device("ACTIONEUR")
   

    
#    _thread.start_new_thread( capteur, (device,remote_device) )
    status=1
    while status==1:
        xbee_message = device.read_data()
        if xbee_message is not None:
            status=0
            _thread.start_new_thread( actioneur, (device,remote_device) )    
    f= open("donnes.txt","a+")
    f.write("--" )
    while :
        #time.sleep(0.01)
        xbee_message = device.read_data()
        
        if xbee_message is not None:
            global recu
            if xbee_message.data.decode()=="STOP":
                print("EMERGENCY STOP")
                recu=str(-1)
                device.send_data_async(remote_device, recu)
                sys.exit(0)
            clear = lambda: os.system('clear') 
            clear()
            
            recu = xbee_message.data.decode()
            millis = int(round(time.time() * 1000))
            # if recu != "0":
            #     print (millis)
                #f.write("%d\r\n" % millis)
            #if recu == 1:
            print("Status: %s " % recu )
            
            
           # time.sleep(0.01)
            #device.send_data_async(remote_device, recu)
       
    if device is not None and device.is_open():
        device.close()


if __name__ == '__main__':
    main()
